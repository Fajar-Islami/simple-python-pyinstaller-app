pipeline {
    agent none
    options {
        skipStagesAfterUnstable()
    }
    stages {
        stage('Build') {
            agent {
                docker {
                    image 'python:2-alpine'
                }
            }
            steps {
                sh 'python -m py_compile sources/add2vals.py sources/calc.py'
                stash(name: 'compiled-results', includes: 'sources/*.py*')
            }
        }
        stage('Test') {
            agent {
                docker {
                    image 'qnib/pytest'
                }
            }
            steps {
                sh 'py.test --verbose --junit-xml test-reports/results.xml sources/test_calc.py'
            }
            post {
                always {
                    junit 'test-reports/results.xml'
                }
            }
        }
        stage('Deploy') {
            agent any
            environment {
                VOLUME = '$(pwd):/src'
                IMAGE = 'cdrx/pyinstaller-linux:python2'
            }
            steps {
                // dir(path: env.BUILD_ID) {
                    // unstash(name: 'compiled-results')
                    // sh "./jenkins/scripts/dockerize.sh"
                    sh 'pwd'
                    sh 'ls'
                    sh 'cd sources && ls'
                    sh './jenkins/scripts/deliver.sh'
                    sh "docker run --rm -v ${VOLUME} ${IMAGE} 'pyinstaller -F add2vals.py'"
                // }
            }
            post {
                success {
                    archiveArtifacts "${env.BUILD_ID}/sources/dist/add2vals"
                    sh "docker run --rm -v ${VOLUME} ${IMAGE} 'rm -rf build dist'"
                }
            }
        }
        // stage('Deploy') {
        //     agent any
            
        //     steps {
        //         //  withEnv(["HOME=${env.WORKSPACE}"]) {
        //         dir(path: env.BUILD_ID) {
        //             // sh "./jenkins/scripts/dockerize.sh"
        //             sh "docker build -f dockerfile-app . --tag simple-pyhton:1.0.0"
        //             sh "docker run --rm -d --name simple-pyhton -p 3000:3000 simple-pyhton:1.0.0"

        //             echo "Waiting 60 seconds for test the app before deploying"
        //             sleep 10 // seconds
        //             echo "Waiting Complete"

        //             sh 'docker stop simple-pyhton && docker rm simple-pyhton && docker rmi simple-pyhton:1.0.0'

        //             input message: 'Proceed to the Deploy stage?'
        //             echo "App Deployed"
        //          }
        //     }
        // }
    }
}
